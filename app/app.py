from flask import Flask, request
from flask import render_template
#import requests
#import json

import pymongo
from pymongo import MongoClient
client = MongoClient('mongo', 27017)
database = client['cve']
collection = database['cve']
total = collection.count_documents({})


from flask_cors import CORS
app = Flask(__name__)
cors = CORS(app)

@app.route('/')
@app.route('/cve/lists/')
def index():
    args = request.args

    page = request.args.get('page', 1, type=int)
    limit = args.get('limit', default=10, type=int)
    year = args.get('year', default="", type=str)
    lastmodified = args.get('lastmodified', default=-1, type=int)
    lt = args.get('lt', default=10.0, type=float)
    gt = args.get('gt', default=0.0, type=float)
    id = args.get('id', default="", type=str)

    inputs = {
            "limit": limit,
            "year": year,
            "lastmodified": lastmodified,
            "lt": lt,
            "gt": gt
            #"id": id
            }

    #datas = collection.find()#.limit(10)
    payload = {
            "published": {
                    "$regex": year
                },
            "$or": [
                {"metrics.cvssMetricV2.cvssData.baseScore": {"$gte": gt, "$lte": lt}},
                {"metrics.cvssMetricV3.cvssData.baseScore": {"$gte": gt, "$lte": lt}}
                ]
            }
    #datas = collection.find(payload).limit(19)

    if lastmodified != -1:
        datas = collection.find(payload).sort("lastModified", -1).skip((page - 1) * limit).limit(lastmodified)
        datas = list(datas)
    else:
        datas = collection.find(payload).skip((page - 1) * limit).limit(limit)


    # Determine if there are more pages
    search_total = collection.count_documents(payload)
    has_next = (page * limit) < search_total
    has_prev = page > 1

    return render_template("table.html", datas=datas, total=total, search_total=search_total, inputs=inputs,  page=page, has_next=has_next, has_prev=has_prev )

@app.route('/cve/lists/id/<cve_id>')
def cve_id(cve_id):
    data = collection.find_one(cve_id)
    return render_template('single.html', data=data)

if __name__ == "__main__":
    #get_sample_data()
    app.run(host="0.0.0.0", port=5000, debug=True)
